trip <- lDataFrames[[3]]
weather <- lDataFrames[[4]]
View(station)
View(station)
View(trip)
View(trip)
View(status)
View(status)
View(status)
View(status)
View(status)
View(status)
View(weather)
View(weather)
View(weather)
View(trip)
View(trip)
install.packages("tidycensus")
install.packages("tmap")
install.packages("tmaptools")
install.packages("tigris")
install.packages("rio")
library("tigris")
California_geo <-(Class="sf")
California_geo
California_geo <- California(Class="sf")
library(leaflet)
SFCounty <- blocks(state = "CA", county = "San Francisco")
View(SFCounty)
plot(SFCounty)
View(SFCounty)
library(tidycensus)
get_decennial(block, table= P9, year = 2010, sumfiles = sf1, state = CA, County = San Francisco)
P9 <- get_decennial(geography = "block", table= P9, year = 2010, sumfiles = sf1, state = CA, County = San Francisco)
savehistory("~/RmappingSQLStuff.Rhistory")
View(con)
View(con)
rm(con)
rm(lDataFrames)
rm(station)
rm(status)
rm(trip)
rm(weather)
rm(alltables)
rm(i)
rm(tables)
library(rgdal)
install.packages("rgdal")
library(rgdal)
getwd()
setwd("D:/MotorFuelApps/MMF")
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
states <- readOGR("data/cb_2013_us_state_20m.shp", layer = "cb_2013_us_state_20m", GDAL1_integer64_policy = TRUE)
# Create the map
output$map <- renderLeaflet({
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lng = -93.85, lat = 37.45, zoom = 4)
})
L.geoJSON(us-states).addTo(map)
runApp()
runApp()
View(PercentChange)
runApp()
us.states <- RJSONIO::fromJSON("data/us-states.json")
us.states <- RJSONIO::fromJSON("~/us-states.json")
install.packages("RJSONIO")
install.packages("RJSONIO")
library(RJSONIO)
install.packages("RJSONIO")
install.packages("RJSONIO")
library(RJSONIO)
us.states <- RJSONIO::fromJSON("~/us-states.json")
us.states <- RJSONIO::fromJSON("data/us-states.json")
us.states <- RJSONIO::fromJSON("data/us-states.js")
us.states <- RJSONIO::fromJSON("data/us-states.js")
us.states <- RJSONIO::fromJSON("data/us-states.json")
us.states <- RJSONIO::fromJSON("data/us-states.json")
runApp()
library(shiny)
runApp()
colors <- c("#FFEDA0", "#FED976", "#FEB24C", "#FD8D3C", "#FC4E2A", "#E31A1C",  "#BD0026", "#800026")
bins <- c(-Inf, 10, 20, 50, 100, 200, 500, 1000, Inf) + 0.00000001
pal <- colorBin(colors, NULL, bins)
runApp()
leaflet() %>% setView(-96, 37.8, 4) %>%
addTiles() %>%
addGeoJSON(us.states)
PercentChange <- read.csv("data/PercentChange.csv")
GrossVolGas <- read.csv("data/GrossVolGas.csv")
MF33CO16 <- read.csv("data/MF33CO16.csv")
MF33GA16 <- read.csv("data/MF33GA16.csv")
MF33SF16 <- read.csv("data/MF33SF16.csv")
MF33SF17 <- read.csv("data/MF33SF17.csv")
MF121TP1 <- read.csv("data/MF121TP1.csv")
PercentChange <- read.csv("data/PercentChange.csv")
colors <- c("#FFEDA0", "#FED976", "#FEB24C", "#FD8D3C", "#FC4E2A", "#E31A1C",  "#BD0026", "#800026")
bins <- c(-Inf, 10, 20, 50, 100, 200, 500, 1000, Inf) + 0.00000001
pal <- colorBin(colors, NULL, bins)
us.states <- RJSONIO::fromJSON("data/us-states.json")
# Add custom styles to the GeoJSON features (states)
us.states$features <- lapply(us.states$features, function(feature) {
density <- PercentChange$September
feature$style <- list(
weight = 2,
opacity = 1,
color = 'white',
dashArray = '3',
fillOpacity = 0.7,
fillColor = pal(PercentChange$September)
)
return(feature)
})
leaflet() %>% setView(-96, 37.8, 4) %>%
addTiles() %>%
addGeoJSON(us.states)
GrossVolGas <- read.csv("data/GrossVolGas.csv")
MF33CO16 <- read.csv("data/MF33CO16.csv")
MF33GA16 <- read.csv("data/MF33GA16.csv")
MF33SF16 <- read.csv("data/MF33SF16.csv")
MF33SF17 <- read.csv("data/MF33SF17.csv")
MF121TP1 <- read.csv("data/MF121TP1.csv")
PercentChange <- read.csv("data/PercentChange.csv")
colors <- c("#FFEDA0", "#FED976", "#FEB24C", "#FD8D3C", "#FC4E2A", "#E31A1C",  "#BD0026", "#800026")
bins <- c(-Inf, 0.001, 0.01, 0.05, 0.1, 200, 500, 1000, Inf) + 0.00000001
pal <- colorBin(colors, NULL, bins)
us.states <- RJSONIO::fromJSON("data/us-states.json")
# Add custom styles to the GeoJSON features (states)
us.states$features <- lapply(us.states$features, function(feature) {
density <- PercentChange$September
feature$style <- list(
weight = 2,
opacity = 1,
color = 'white',
dashArray = '3',
fillOpacity = 0.7,
fillColor = pal(PercentChange$September)
)
return(feature)
})
leaflet() %>% setView(-96, 37.8, 4) %>%
addTiles() %>%
addGeoJSON(us.states)
GrossVolGas <- read.csv("data/GrossVolGas.csv")
MF33CO16 <- read.csv("data/MF33CO16.csv")
MF33GA16 <- read.csv("data/MF33GA16.csv")
MF33SF16 <- read.csv("data/MF33SF16.csv")
MF33SF17 <- read.csv("data/MF33SF17.csv")
MF121TP1 <- read.csv("data/MF121TP1.csv")
PercentChange <- read.csv("data/PercentChange.csv")
colors <- c("#FFEDA0", "#FED976", "#FEB24C", "#FD8D3C", "#FC4E2A", "#E31A1C",  "#BD0026", "#800026")
bins <- c(-Inf, 0.001, 0.01, 0.05, 0.1, 200, 500, 1000, Inf) + 0.00000001
pal <- colorBin(colors, NULL, bins)
us.states <- RJSONIO::fromJSON("data/us-states.json")
# Add custom styles to the GeoJSON features (states)
us.states$features <- lapply(us.states$features, function(feature) {
density <- PercentChange$September
feature$style <- list(
weight = 2,
opacity = 1,
color = 'white',
dashArray = '3',
fillOpacity = 0.7,
fillColor = pal(PercentChange$September)
)
return(feature)
})
leaflet() %>% setView(-96, 37.8, 4) %>%
addTiles() %>%
addGeoJSON(us.states)
GrossVolGas <- read.csv("data/GrossVolGas.csv")
MF33CO16 <- read.csv("data/MF33CO16.csv")
MF33GA16 <- read.csv("data/MF33GA16.csv")
MF33SF16 <- read.csv("data/MF33SF16.csv")
MF33SF17 <- read.csv("data/MF33SF17.csv")
MF121TP1 <- read.csv("data/MF121TP1.csv")
PercentChange <- read.csv("data/PercentChange.csv")
colors <- c("#FFEDA0", "#FED976", "#FEB24C", "#FD8D3C", "#FC4E2A", "#E31A1C",  "#BD0026", "#800026")
bins <- c(-Inf, 0.001, 0.01, 0.05, 0.1, 200, 500, 1000, Inf) + 0.00000001
pal <- colorBin(colors, NULL, bins)
us.states <- RJSONIO::fromJSON("data/us-states.json")
# # Add custom styles to the GeoJSON features (states)
# us.states$features <- lapply(us.states$features, function(feature) {
#   density <- PercentChange$September
#   feature$style <- list(
#     weight = 2,
#     opacity = 1,
#     color = 'white',
#     dashArray = '3',
#     fillOpacity = 0.7,
#     fillColor = pal(PercentChange$September)
#   )
#   return(feature)
# })
leaflet() %>% setView(-96, 37.8, 4) %>%
addTiles() %>%
addGeoJSON(us.states)
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("V8")
install.packages("V8")
library(V8)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinyjs")
library(shinyjs)
runApp()
runApp()
View(us.states)
GrossVolGas <- read.csv("data/GrossVolGas.csv")
MF33CO16 <- read.csv("data/MF33CO16.csv")
MF33GA16 <- read.csv("data/MF33GA16.csv")
MF33SF16 <- read.csv("data/MF33SF16.csv")
MF33SF17 <- read.csv("data/MF33SF17.csv")
MF121TP1 <- read.csv("data/MF121TP1.csv")
PercentChange <- read.csv("data/PercentChange.csv")
colors <- c("#FFEDA0", "#FED976", "#FEB24C", "#FD8D3C", "#FC4E2A", "#E31A1C",  "#BD0026", "#800026")
bins <- c(-Inf, 0.001, 0.01, 0.05, 0.1, 200, 500, 1000, Inf) + 0.00000001
pal <- colorBin(colors, NULL, bins)
us.states <- RJSONIO::fromJSON("data/us-states.json")
# # Add custom styles to the GeoJSON features (states)
# us.states$features <- lapply(us.states$features, function(feature) {
#   density <- PercentChange$September
#   feature$style <- list(
#     weight = 2,
#     opacity = 1,
#     color = 'white',
#     dashArray = '3',
#     fillOpacity = 0.7,
#     fillColor = pal(PercentChange$September)
#   )
#   return(feature)
# })
leaflet() %>% setView(-96, 37.8, 4) %>%
addTiles() %>%
addGeoJSON(us.states)
states <- geojsonio::geojson_read("data/us-states.geojson", what = "sp")
GrossVolGas <- read.csv("data/GrossVolGas.csv")
MF33CO16 <- read.csv("data/MF33CO16.csv")
MF33GA16 <- read.csv("data/MF33GA16.csv")
MF33SF16 <- read.csv("data/MF33SF16.csv")
MF33SF17 <- read.csv("data/MF33SF17.csv")
MF121TP1 <- read.csv("data/MF121TP1.csv")
PercentChange <- read.csv("data/PercentChange.csv")
states <- geojsonio::geojson_read("data/us-states.geojson", what = "sp")
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
states$name, states$density
) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
states <- geojsonio::geojson_read("data/us-states.geojson", what = "sp")
fules.map.0917 <- merge(states, PercentChange, by = "NAME")
class(obesity.map.2016)
View(obesity.map.2016)
runApp()
PercentChange <- read.csv("data/PercentChange.csv")
View(PercentChange)
PercentChange <- read.csv("data/PercentChange.csv", header= TRUE)
View(PercentChange)
View(states)
fuels.map.0917 <- merge(states, PercentChange, by = "name")
class(fuels.map.0917)
View(fuels.map.0917)
runApp()
fuels.map.0917 <- merge(x=states, y=PercentChange, by.x='names', by.y='names', fill=-9999)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(GrossVolGas)
View(GrossVolGas)
runApp()
View(GrossVolGas)
View(GrossVolGas)
runApp()
runApp()
runApp()
runApp()
View(GrossVolGas)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
TGrossVOlGas <- t(GrossVolGas)
View(TGrossVOlGas)
View(TGrossVOlGas)
runApp()
runApp()
runApp()
runApp()
View(allzips)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(TGrossVOlGas)
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("reshape")
runApp()
install.packages("reshape2")
runApp()
install.packages("melt")
runApp()
View(MGrossVolGas)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("plotly")
runApp()
runApp()
runApp()
runApp()
runApp()
View(TGrossVOlGas)
runApp()
runApp()
input
runApp()
library(shiny)
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Reactivity"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Text for providing a caption ----
# Note: Changes made to the caption in the textInput control
# are updated in the output area immediately as you type
textInput(inputId = "caption",
label = "Caption:",
value = "Data Summary"),
# Input: Selector for choosing dataset ----
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 10)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Formatted text for caption ----
h3(textOutput("caption", container = span)),
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
# By declaring datasetInput as a reactive expression we ensure
# that:
#
# 1. It is only called when the inputs it depends on changes
# 2. The computation and result are shared by all the callers,
#    i.e. it only executes a single time
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
# Create caption ----
# The output$caption is computed based on a reactive expression
# that returns input$caption. When the user changes the
# "caption" field:
#
# 1. This function is automatically called to recompute the output
# 2. New caption is pushed back to the browser for re-display
#
# Note that because the data-oriented reactive expressions
# below don't depend on input$caption, those expressions are
# NOT called when input$caption changes
output$caption <- renderText({
input$caption
})
# Generate a summary of the dataset ----
# The output$summary depends on the datasetInput reactive
# expression, so will be re-executed whenever datasetInput is
# invalidated, i.e. whenever the input$dataset changes
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# Show the first "n" observations ----
# The output$view depends on both the databaseInput reactive
# expression and input$obs, so it will be re-executed whenever
# input$dataset or input$obs is changed
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
}
# Create Shiny app ----
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
