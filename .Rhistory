install.packages("RSQLite")
C
con = dbConnect(drv=RSQLite::SQLite(), dbname="C:\Users\erich\Desktop\Kaggle\database.sqlite")
con = dbConnect(drv=RSQLite::SQLite(), dbname=r"C:\Users\erich\Desktop\Kaggle\database.sqlite")
con = dbConnect(drv="SQLite", dbname="database.sqlite")
con
dbDriver("MySQL")
install.packages("RSQLite")
install.packages("RSQLite")
dbDriver("MySQL")
dbDriver("RSQLite")
install.packages("RSQLServer")
library(RSQLServer)
dbDriver("RSQLite")
con = dbConnect(drv="SQLite", dbname="database.sqlite")
library("RSQLServer")
library("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
library("RSQLite")
library("RSQLite")
library("RSQLite")
install.packages("RSQLite")
library("RSQLite")
con = dbConnect(drv=RSQLite::SQLite(), dbname="C:\Users\erich\Desktop\Kaggle\database.sqlite")
con = dbConnect(drv=RSQLite::SQLite(), dbname="database.sqlite")
View(con)
View(con)
alltables = dbListTables(con)
con = dbConnect(drv=RSQLite::SQLite(), dbname="C:\\Users\\erich\\Desktop\\Kaggle\\database.sqlite")
View(con)
View(con)
View(con)
View(con)
View(con)
con = dbConnect(drv=RSQLite::SQLite(), dbname="database.sqlite")
con = dbConnect(drv="SQLite", dbname="database.sqlite")
con = dbConnect(drv=SQLite, dbname="database.sqlite")
con = dbConnect(drv=RSQLite::SQLite(), dbname="database.sqlite")
tables <- dbListTables(con)
tables
tables <- tables[tables != "sqlite_sequence"]
lDataFrames <- vector("list", length=length(tables))
for (i in seq(along=tables)) {
lDataFrames[[i]] <- dbGetQuery(conn=con, statement=paste("SELECT * FROM '", tables[[i]], "'", sep=""))
}
View(lDataFrames)
View(lDataFrames)
View(lDataFrames)
station <- lDataframes[[1]]
station <- lDataFrames[[1]]
View(station)
status <- lDataFrames[[2]]
trip <- lDataFrames[[3]]
weather <- lDataFrames[[4]]
View(station)
View(station)
View(trip)
View(trip)
View(status)
View(status)
View(status)
View(status)
View(status)
View(status)
View(weather)
View(weather)
View(weather)
View(trip)
View(trip)
install.packages("tidycensus")
install.packages("tmap")
install.packages("tmaptools")
install.packages("tigris")
install.packages("rio")
library("tigris")
California_geo <-(Class="sf")
California_geo
California_geo <- California(Class="sf")
library(leaflet)
SFCounty <- blocks(state = "CA", county = "San Francisco")
View(SFCounty)
plot(SFCounty)
View(SFCounty)
library(tidycensus)
get_decennial(block, table= P9, year = 2010, sumfiles = sf1, state = CA, County = San Francisco)
P9 <- get_decennial(geography = "block", table= P9, year = 2010, sumfiles = sf1, state = CA, County = San Francisco)
savehistory("~/RmappingSQLStuff.Rhistory")
View(con)
View(con)
rm(con)
rm(lDataFrames)
rm(station)
rm(status)
rm(trip)
rm(weather)
rm(alltables)
rm(i)
rm(tables)
shiny::runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
click
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
states
click
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
states
runApp('D:/MotorFuelApps/MMF')
point
coords
runApp('D:/MotorFuelApps/MMF')
stateReact
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
click
runApp('D:/MotorFuelApps/MMF')
click
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
click
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
click
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
shiny::runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
p
p$id
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
p
runApp('D:/MotorFuelApps/MMF')
input
input$state
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
states
state$region
states$region
runApp('D:/MotorFuelApps/MMF')
stateReact
click
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
shiny::runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
event$id
runApp('D:/MotorFuelApps/MMF')
selectedState
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
selectedState
runApp()
shiny::runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
View(GrossVolGas)
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
runApp('D:/MotorFuelApps/MMF')
shiny::runApp('D:/MotorFuelApps/MMF')
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
View(MF121TP1)
View(MF121TP1)
